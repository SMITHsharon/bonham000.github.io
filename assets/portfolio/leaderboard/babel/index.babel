$(document).ready(function () {

    $(window).scroll(function () {
        if ($(this).scrollTop() > 2500) {
            $('.scrollup').fadeIn();
        } else {
            $('.scrollup').fadeOut();
        }
    });

    $('.scrollup').click(function () {
        $("html, body").animate({
            scrollTop: 0
        }, 1000);
        return false;
    });

});




var Home = React.createClass({

  getInitialState: function() {
    return { results: [] };
  },
  
  sortAlltime() {
    
    var array = this.state.results;
    var sort = array.sort(function(a, b) {
        return parseFloat(a.alltime) - parseFloat(b.alltime);
    });

    var allTime = sort.reverse();
    this.setState({ results: allTime });

  },
  
  reverseAlltime() {
    
    var array = this.state.results;
    var sort = array.sort(function(a, b) {
        return parseFloat(a.alltime) - parseFloat(b.alltime);
    });

    this.setState({ results: sort });

  },
  
   sortRecent() {
    
    var array = this.state.results;
    var sort = array.sort(function(a, b) {
        return parseFloat(a.recent) - parseFloat(b.recent);
    });

    var recent = sort.reverse();
    this.setState({ results: recent });

  },
  
   reverseRecent() {
    
    var array = this.state.results;
    var sort = array.sort(function(a, b) {
        return parseFloat(a.recent) - parseFloat(b.recent);
    });

    this.setState({ results: sort });

  },
  
   sortUser() {
    
    var array = this.state.results;
    var sort = array.sort(function(a, b) {
        if(a.username < b.username) return -1;
        if(a.username > b.username) return 1;
        return 0;
    })

    this.setState({ results: sort });

  },
  
   reverseUser() {
    
    var array = this.state.results;
    var sort = array.sort(function(a, b) {
        if(a.username < b.username) return -1;
        if(a.username > b.username) return 1;
        return 0;
    })
    var reverse = sort.reverse();

    this.setState({ results: reverse });

  },
  
  
  componentWillMount() {
    $.get("https://fcctop100.herokuapp.com/api/fccusers/top/recent", function(data, status) {

      var result = JSON.stringify(data);
      var array  = JSON.parse(result)
      this.setState({ results: array });
    }.bind(this));
  },
  
  render() {
    return(<div>
        <h1 className="title">Free Code Camp LeaderBoard</h1>
      <table>
        <tr className="mainHeader"><th></th><th className="username">Username</th><th className="points">All Time</th><th className="points">Recent</th></tr>
        <tr className="controlHeader"><th></th><th><span onClick={this.sortUser}><i className="fa fa-arrow-up fa-2x" aria-hidden="true"></i>&nbsp;</span><span onClick={this.reverseUser}>&nbsp;<i className="fa fa-arrow-down fa-2x" aria-hidden="true"></i></span></th><th><span onClick={this.sortAlltime}><i className="fa fa-arrow-up fa-2x" aria-hidden="true"></i>&nbsp;</span><span onClick={this.reverseAlltime}>&nbsp;<i className="fa fa-arrow-down fa-2x" aria-hidden="true"></i></span></th><th><span onClick={this.sortRecent}><i className="fa fa-arrow-up fa-2x" aria-hidden="true"></i>&nbsp;</span><span onClick={this.reverseRecent}>&nbsp;<i className="fa fa-arrow-down fa-2x" aria-hidden="true"></i></span></th></tr>
        {this.state.results.map(function(user, i) {
          return <tr className="entry"><td className="imgCol"><img src={user.img}/></td><td className="userCol"><a target="_blank" href={"http://www.freecodecamp.com/" + user.username}>{user.username}</a></td><td className="alltimeCol">{user.alltime}</td><td className="recentCol">{user.recent}</td></tr>
          })
        }
      </table>
        <p className="credits">A <a target="_blank" href="https://www.freecodecamp.com/challenges/build-a-camper-leaderboard">Free Code Camp Project</a> by <a target="_blank" href="http://sean-smith.me">Sean Smith</a></p><p className="react"><a target="_blank" href="https://facebook.github.io/react/">Built with React</a></p>
        </div>
      )
  }
  
});

ReactDOM.render(<Home />, document.getElementById("content"));